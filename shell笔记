1 案例1：awk流程控制
1.1 问题

本案例要求了解awk的流程控制操作，可自行设置awk语句来有验证以下操作：
if分支结构（单分支、双分支、多分支）
练习awk数组的使用
1.2 步骤

实现此案例需要按照如下步骤进行。
步骤一：awk过滤中的if分支结构

1）单分支
统计/etc/passwd文件中UID小于或等于1000的用户个数：
[root@svr5 ~]# awk -F: '{if($3<=1000){i++}}END{print i}' /etc/passwd
39
统计/etc/passwd文件中UID大于1000的用户个数：
[root@svr5 ~]# awk -F: '{if($3>1000){i++}}END{print i}' /etc/passwd
8
统计/etc/passwd文件中登录Shell是“/bin/bash”的用户个数：
[root@svr5 ~]# awk -F: '{if($7~/bash$/){i++}}END{print i}'  /etc/passwd
29
2）双分支
分别统计/etc/passwd文件中UID小于或等于1000、UID大于1000的用户个数：
[root@svr5 ~]# awk -F: '{if($3<=1000){i++}else{j++}}END{print i,j}' /etc/passwd
39 8
分别统计/etc/passwd文件中登录Shell是“/bin/bash”、 登录Shell不是“/bin/bash”的用户个数：
[root@svr5 ~]# awk -F: '{if($7~/bash$/){i++}else{j++}} END{print i,j}' /etc/passwd
29 38
步骤二：awk数组

1）数组的语法格式
数组是一个可以存储多个值的变量，具体使用的格式如下：
定义数组的格式：数组名[下标]=元素值
调用数组的格式：数组名[下标]
遍历数组的用法：for(变量 in 数组名){print 数组名[变量]}。
[root@svr5 ~]# awk 'BEGIN{a[0]=11;a[1]=88;print a[1],a[0]}'
88 11
[root@svr5 ~]# awk 'BEGIN{a++;print a}'
1
[root@svr5 ~]# awk 'BEGIN{a0++;print a0}'
1
[root@svr5 ~]# awk 'BEGIN{a[0]++;print a[0]}'
1
[root@svr5 ~]# awk 'BEGIN{a[0]=0;a[1]=11;a[2]=22; for(i in a){print i,a[i]}}'
0 0
1 11
2 22
注意，awk数组的下标除了可以使用数字，也可以使用字符串，字符串需要使用双引号：
[root@svr5 ~]# awk 'BEGIN{a["hehe"]=11;print a["hehe"]}'
11
2 案例2：awk扩展应用
2.1 问题

本案例要求使用awk工具完成下列两个任务：
分析Web日志的访问量排名，要求获得客户机的地址、访问次数，并且按照访问次数排名
2.2 方案

1）awk统计Web访问排名
在分析Web日志文件时，每条访问记录的第一列就是客户机的IP地址，其中会有很多重复的IP地址。因此只用awk提取出这一列是不够的，还需要统计重复记录的数量并且进行排序。
通过awk提取信息时，利用IP地址作为数组下标，每遇到一个重复值就将此数组元素递增1，最终就获得了这个IP地址出现的次数。
针对文本排序输出可以采用sort命令，相关的常见选项为-r、-n、-k。其中-n表示按数字顺序升序排列，而-r表示反序，-k可以指定按第几个字段来排序。
2.3 步骤

实现此案例需要按照如下步骤进行。
步骤一：统计Web访问量排名

分步测试、验证效果如下所述。
1）提取IP地址及访问量[root@svr5 ~]# awk '{ip[$1]++} \
>  END{for(i in ip) {print ip[i],i }}' /var/log/httpd/access_log
4  127.0.0.1
17 192.168.4.5
13 192.168.4.110
.. ..
2）对第1）步的结果根据访问量排名
[root@svr5 ~]# awk  '{ip[$1]++} END{for(i in ip) {print i,ip[i]}}' /var/log/httpd/access_log | sort -nr
17 192.168.4.5
13 192.168.4.110
4 127.0.0.1
.. ..
3 案例3：编写监控脚本
3.1 问题

本案例要求编写脚本，实现计算机各个性能数据监控的功能，具体监控项目要求如下：
CPU负载网卡流量
内存剩余容量
磁盘剩余容量
计算机账户数量
当前登录账户数量
计算机当前开启的进程数量
本机已安装的软件包数量
3.2 步骤

实现此案例需要按照如下步骤进行。
步骤一：准备工作

1）查看性能数据的命令
[root@svr5 ~]# uptime                            //查看CPU负载
[root@svr5 ~]# ifconfig eth0                    //查看网卡流量
[root@svr5 ~]# free                            //查看内存信息
[root@svr5 ~]# df                                //查看磁盘空间
[root@svr5 ~]# wc -l /etc/passwd                //查看计算机账户数量
[root@svr5 ~]# who |wc -l                        //查看登录账户数量
[root@svr5 ~]# rpm -qa |wc -l                    //查看已安装软件包数量步骤二：编写参考脚本

1）脚本内容如下：
[root@svr5 ~]# vim test.sh
#!/bin/bash
ip=`ifconfig eth0 | awk '/inet /{print $2}'`
echo "本地IP地址是:"$ip
cpu=`uptime | awk '{print $NF}'`            
#awk中NF为当前行的列数，$NF是最后一列
echo "本机CPU最近15分钟的负载是:"$cpu
net_in=`ifconfig eth0 | awk '/RX p/{print $5}'`
echo "入站网卡流量为:"$net_in
net_out=`ifconfig eth0 | awk '/TX p/{print $5}'`
echo "出站网卡流量为:"$net_out
mem=`free | awk '/Mem/{print $4}'`
echo "内存剩余容量为:"$mem
disk=`df | awk '/\/$/{print $4}'`
echo "根分区剩余容量为:"$disk
user=`cat /etc/passwd |wc -l`
echo "本地账户数量为:"$user
login=`who | wc -l`
echo "当前登陆计算机的账户数量为:"$loginprocess=`ps aux | wc -l`
echo "当前计算机启动的进程数量为:"$process
soft=`rpm -qa | wc -l`
echo "当前计算机已安装的软件数量为:"$soft
4 案例4：编写安全检测脚本
4.1 问题

本案例要求编写脚本，防止远程ssh暴力破解密码，具体监控项目要求如下：
检测ssh登录日志，如果远程登陆账号名错误3次，则屏蔽远程主机的IP
检测ssh登录日志，如果远程登陆密码错误3次，则屏蔽远程主机的IP
4.2 步骤

实现此案例需要按照如下步骤进行。
步骤一：准备工作

1）过滤帐户名失败的命令(登陆日志文件为/var/log/secure)
[root@svr5 ~]# awk '/Invalid user/{print $10}' /var/log/secure
2）过滤密码失败的命令
[root@svr5 ~]# awk '/Failed password/{print $11}' /var/log/secure
步骤二：编写参考脚本

1）脚本内容如下：
[root@svr5 ~]# vim test.sh
#!/bin/bash
awk '/Failed password/{print $11}' /var/log/secure  | awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}' | awk '$1>3{print $2}'
awk '/Invalid user/{print $10}' /var/log/secure  | awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}' | awk '$1>3{print $2}'


(1). 使用 while 循环,统计 1+2+3+4...+100。提示:可以用一个独立的变量 sum 存放求和的值。

参考答案:
#!/bin/bash
sum=0
for i in {1..100}
do
let sum+=i
done
echo $sum

----------------------------------------------------------------------------------

(2). 编写脚本,使用 for 对 2000 以内的整数循环,判断哪些数字是177的倍数并显示。
提示:可以使用取余运算，余数为0则是倍数

参考答案:
#!/bin/bash
for i in {1..2000}
do
num=$[i%177]
if [ $num -eq 0 ];then
echo $i
fi
done

----------------------------------------------------------------------------------

(3). 编写脚本,通过 3 个 read 命令读取用户输入的三个任意数字,脚本对输入的三个数字求和输出。

参考答案:
#!/bin/bash
read -p "请输入数字" num1
read -p "请输入数字" num2
read -p "请输入数字" num3
echo $[num1+num2+num3]

----------------------------------------------------------------------------------

(4). 判断当前系统启动的进程数量,如果进程数量超过 100 个,则发送邮件给 root 报警。
(ps aux命令可以查看进程,wc -l可以统计数量)

参考答案:
#!/bin/bash
num=`ps aux | wc -l`
[ $num -gt 100 ] && echo "进程超过100啦～" | mail -s Warning root

----------------------------------------------------------------------------------

(5). 编写脚本,测试当前用户对/etc/passwd 文件是否具有读、写、执行的权限,脚本执行结果类似下面的效果。
当前用户对/etc/passwd 有读权限
当前用户对/etc/passwd 有写权限
当前用户对/etc/passwd 无执行权限

参考答案:
#!/bin/bash
file=/etc/passwd
[ -r /etc/passwd ] && echo "当前用户对$file 有读权限" || echo "当前用户对$file >没有读权限"
[ -w /etc/passwd ] && echo "当前用户对$file 有写权限" || echo "当前用户对$file >没有写权限"
[ -x /etc/passwd ] && echo "当前用户对$file 有执行权限" || echo "当前用户对$file 没有执行权限"

----------------------------------------------------------------------------------

(6).有一个文件user.txt 里面存放了不同的账户名称,具体内容如下：
zhangsan
lisi
wangwu
请编写脚本，能够根据文件中的账户名分别创建账户。

参考答案:
#!/bin/bash
for i in `cat user.txt`
do
    useradd $i
done

----------------------------------------------------------------------------------

(选做题). 使用循环打印 5*5 的星星,脚本输出如下形状:(5 行,5 列),备注:echo -n 可以不换行输出。
* * * * *
* * * * *
* * * * *
* * * * *

参考答案:
#!/bin/bash
for i in {1..5}
do
    for j in {1..5}
    do
        echo -n "* "     #注意 *后面有个空格
    done
    echo                 #打印 5 个不换号的*后,打印一个换行
done

shell脚本
/bin/bash   默认解释器
cat /etc/shells   查看所有解释器
yum -y install ksh   安装新解释器

bash优点 
tab建,快捷键,历史记录,管道符,重定向
--------------------------------------------------------------------------
规范的shell脚本
1,声明解释器
2,注释脚本功能,变量含义等等
3,执行代码
--------------------------------------------------------------------------
脚本的运行方式
1, 添加x执行权限  
chmod +x test1.sh
2, 使用解释器执行, 开启子进程
bash test1.sh
3, 使用当前解释器执行,不开启子进程
source test1.sh

----------------------------------------------------------------------
编写一键部署ftp服务的脚本:
#!/bin/bash
yum -y install vsftpd &> /dev/null
systemctl restart vsftpd
systemctl enable vsftpd
cp /etc/passwd /var/ftp/pub

测试时把防火墙临时关闭
使用真机访问虚拟机的ftp

常量 固定不变
变量 灵活多变
1,自定义变量,名称需要使用大小写字母,数字或下划线,禁止使用特殊符号,不能以数字开头
   变量名称=值
2,环境变量 USER UID HOME HOSTNAME SHELL PATH PS1 PS2
3,位置变量和预定义变量
    $1  $2  $3  $0  $$  $#  $*  $?
#!/bin/bash
echo $1   脚本后的第1个参数
echo $2   脚本后的第2个参数
echo $3   脚本后的第3个参数
echo $0   脚本名
echo $$   显示脚本执行时的进程ID号
echo $#   参数的个数
echo $*   所有参数
echo $?   判断上一条指令是否执行成功 0成功   非0失败

编写创建账户与配置密码的脚本:
#!/bin/bash
useradd xyz
echo 123 | passwd --stdin xyz

升级版:
#!/bin/bash
useradd $1
echo $2 | passwd --stdin $1

env 查看所有环境变量
set 查看所有变量
=======================================
变量扩展知识:
""  双引号,界定范围
''   单引号,界定范围,屏蔽特殊符号
``  反撇号 或$() ,获取命令执行的结果
tar -zcf log-`date +%Y-%m-%d`.tar.gz /var/log
-------------------------------------------
使用read功能编写交互式脚本:
#!/bin/bash
read -p "请输入用户名"  User
useradd $User
read -p "请输入密码"  Pass
echo $Pass | passwd --stdin $User
-------------------------------------------
stty -echo  屏蔽回显
stty echo   恢复回显
------------------------------------------
#!/bin/bash
read -p "请输入用户名" User
useradd $User
stty -echo
read -p "请输入密码" Pass
stty echo
echo $Pass | passwd --stdin $User
-------------------------------------------
export 发布全局变量
export a=10  发布新的全局变量
export b  将局部变量扩展为全局变量
export -n a   取消全局变量,恢复为局部变量
unset a  取消变量定义(删除变量)
====================================
shell中的运算
1, expr
expr 1 + 1  加
expr 1 - 1  减
expr 2 \* 2 乘        \ 转义符号,屏蔽之后一个字符的特殊含义
expr 10 / 5 除
expr 10 % 3 求模,相当于取余数
2, $[] 或 $(())
echo $[1+1]
echo $[10-5]
echo $[10*5]
echo $[10/5]
echo $[10%5]
3, let 通常用于变量计算,结果不显示
let a=1+1
let c=c+c
对变量自增减:
				     主流写法(主要掌握)
let a=a+1  相当于    let a++
let a=a-1 		  let a--
let a=a+2  		  let a+=2
let a=a-2  		  let a-=2
let a=a*2  		  let a*=2
let a=a/2  		  let a/=2
let a=a%2  		  let a%=2

4 ,计算器  bc 可以计算小数
echo "1.1+1" | bc
echo "scale=3;10/3" | bc


变量
1,自定义变量

2,环境变量
USER UID HOME HOSTNAME SHELL PWD PATH PS1 PS2
3,位置变量和预定义变量
$1 $2 $3 ....
$0  $$  $#  $*  $?  $!

变量扩展
""   ''   ``  $()
read -p
stty -echo
stty echo

exprot  发布全局变量
exprot -n 

shell中的运算
1  
expr 1 + 1
expr 1 \* 1
expr 1 % 1
2
$[]  $(())
echo $[1+1]
3
let a=1+1
let a++   let a--
let a+=2  let a%=5
4
echo "scale=3;10/3" | bc

--------------------------------------------------------------
shell中的条件测试:
使用方式
1,test 测试语句
2,[  测试语句 ]
=========================================
测试内容包含:
1,字符串
==是否相等   !=是否不等     -z是否为空
test a == a  或者  [  a == a ]    使用  echo $?查看结果
2,数字
-eq等于  -ne不等于  -gt大于  -ge大于等于  -lt小于  -le小于等于
3,文件
-e 判断文件是否存在,不关心文件类型  -d 判断目录是否存在  -f 判断普通文件是否存在  -r   -w   -x
4,  逻辑测试 
&&并且        之前的任务成功,之后的任务才会执行
||或者           之前的任务失败,之后的任务才会执行

[ $USER == root ] && echo "我 是 管理员"      
-----------------------------------------------------------------------
两个逻辑符号连续使用:
ls a || ls b && ls test1.sh
a
test1.sh
ls a || ls b || ls test1.sh
a
ls a && ls b || ls test1.sh
a
b
-----------------------------------------------------------------------
[ $USER == root ] && echo "我 是 管理员"  ||  echo "我不是管理员"

编写脚本, 每2分钟检测当前登录系统的用户数量,如果超过3人,发邮件通知管理员
#!/bin/bash
n=`who | wc -l`
[ $n -gt 3 ] && echo "有人入侵服务器!隔壁老王来了" | mail -s test root
保存退出之后赋予脚本x权限 
chmod +x test1.sh
然后在计划任务中添加时间频率和执行的脚本路径
crontab -e
*/2 * * * * /opt/test1.sh
-----------------------------------------------------------------------
mail -s test root < 
123    使用输入重定向发送邮件
-----------------------------------------------------------------------
shell中的if
单分支
if 条件测试 ;then
	命令序列
fi
双分支
if 条件测试 ;then
	命令序列1
else
	命令序列2
fi
多分支
if 条件测试 ;then
	命令序列1
elif 条件测试 ;then
	命令序列2
else
	命令序列3
fi
------------------------------------------------------------------------
ping -c定义ping次数  -i定义间隔时间,秒  -W等待反馈信息的时间,秒
ping -c 3 -i 0.2 -W 1 172.25.0.10
------------------------------------------------------------------------
使用if双分支编写ping脚本:
#!/bin/bash
ping -c 3 -i 0.2 -W 1 172.25.0.10 &> /dev/null
if [ $? -eq 0 ] ;then
	echo "通了"
else
	echo "不通"
fi
-------------------------------
#!/bin/bash
ping -c 3 -i 0.2 -W 1 $1 &> /dev/null
if [ $? -eq 0 ] ;then
	echo "通了"
else
	echo "不通"
fi
-----------------------------------------------------------------------
使用if多分支编写猜数脚本:
#!/bin/bash
x=$[RANDOM%10]
read -p "请输入一个数字(0-9)"  n
if [ $x -eq $n ] ;then
        echo "猜对了!!"
elif [ $n -lt $x ] ;then
        echo "猜小了"
else
        echo "猜大了"
fi
=================================
for循环:
for 变量名称 in 值1 值2 值3......
do
	执行指令
done
-------------------------
1, 循环次数,和值有关   2, 循环时的变量,也和值有关
-------------------------
#!/bin/bash
for i in {1..10}     多个值的简单写法
do
        echo $i
done
--------------------------------- 
#!/bin/bash
a=10
for i in {1..$a}     大括号不支持套用变量
do
        echo $i
done
---------------------------------
#!/bin/bash
a=10
for i in `seq $a`    可以使用seq支持变量
do
        echo $i
done
------------------------------------------------
#!/bin/bash
x=0
y=0
for i in {1..15}
do
    ping -c 3 -i 0.2 -W 1 172.25.0.$i &> /dev/null
    if [ $? -eq 0 ];then
        echo "172.25.0.$i通了"
        let x++
    else
        echo "172.25.0.$i不通"
        let y++
    fi
done
echo "$x台通了,$y台不通"
=======================================
while循环
while 条件测试
do
	执行指令
done
---------------------------------------------
使用while循环编写猜数脚本,猜对为止
#!/bin/bash
x=$[RANDOM%100]
y=0
while :
do
        let y++
        read -p "请输入数字(0-99)" n
        if [ $x -eq $n ];then
                echo "猜对了!!猜了$y次"
                exit
        elif [ $n -lt $x ];then
                echo "猜小了"
        else
                echo "猜大了"
        fi
done


if
单分支
if 条件测试 ;then
	命令序列
fi
双分支
if 条件测试 ;then
	命令序列1
else
	命令序列2
fi
多分支
if 条件测试1 ;then
	命令序列1
elif 条件测试2 ;then
	命令序列2
elif 条件测试3;then
	命令序列3
elif 条件测试4 ;then
	命令序列4
.......
else
	命令序列n
fi

ping -c  -i  -W 1

for    有次数限制
for i in 值1 值2 .....
do
	循环任务
done

while :   无限循环
do
	循环任务
	exit
done
=======================================
case分支,相当于简化版本的if,功能不如if强大,但是代码比if精简

case  变量  in
模式1)
    命令序列1 ;;
模式2)
    命令序列2 ;;
    .. ..
*)
    默认命令序列
esac
---------------------------------------------------------
#!/bin/bash
case $1 in
t)
        touch $2 ;;
m)
        mkdir $2 ;;
r)
        rm -rf $2 ;;
*)
        echo "t|m|r"
esac

==============================
使用case分支编写工具脚本:
1,准备工作
scp lnmp_soft.tar.gz root@server0:/opt   将真机的tar包传入虚拟机
tar -xf lnmp_soft.tar.gz  在虚拟机中释放tar包
cp lnmp_soft/nginx-1.12.2.tar.gz /opt  拷贝nginx包到opt
---------------------------------------------------------
编写一键源代码安装nginx的脚本
#!/bin/bash
yum -y install gcc openssl-devel pcre-devel  &> /dev/null
tar -xf nginx-1.12.2.tar.gz
cd nginx-1.12.2
./configure
make
make install
------------------------------------------------------
运行脚本后,nginx自动安装完毕
cd /usr/local/nginx/sbin/    前往nginx主程序所在目录
./nginx    执行程序(开启nginx网站服务)
关闭防火墙后,在真机打开浏览器输入虚拟机的地址可以看到网站
----------------------------------------------------------------------------
#!/bin/bash
case $1 in
st)
        /usr/local/nginx/sbin/nginx ;;
stop)
        /usr/local/nginx/sbin/nginx -s stop ;;
re)
        /usr/local/nginx/sbin/nginx -s stop
        /usr/local/nginx/sbin/nginx ;;
*)
        echo "st开启|stop关闭|re重启"
esac
----------------------------------------------------------------------------
完善脚本:
#!/bin/bash
case $1 in
st)
        /usr/local/nginx/sbin/nginx ;;
stop)
        /usr/local/nginx/sbin/nginx -s stop ;;
re)
        /usr/local/nginx/sbin/nginx -s stop
        /usr/local/nginx/sbin/nginx ;;
sa)
        netstat -ntulp |grep -q nginx
        [ $? -eq 0 ] && echo "服务正在运行" || echo "服务没有开启"  ;;
*)
        echo "st开启|stop关闭|re重启|sa查询状态"
esac
---------------------------------------------------------------------------
修改输出字体颜色
echo -e "\033[32mABCD\033[0m"     输出不通颜色的ABCD
echo -e "\033[33mABCD\033[0m"
echo -e "\033[34mABCD\033[0m"
---------------------------------------------------------------------------
函数 
1）函数的定义方法

格式1：

function  函数名 {
    命令序列
    .. ..
}

格式2：

函数名() {
    命令序列
    .. ..
}
--------------------------------------------------------------
使用函数编写方便调用不同颜色字体的脚本:
#!/bin/bash
cecho (){
echo -e "\033[$1m$2\033[0m"
}

cecho 31 ABCDEFG
cecho 32 ABCDEFG
cecho 33 ABCDEFG
cecho 34 ABCDEFG
cecho 35 ABCDEFG
cecho 36 ABCDEFG
cecho 37 ABCDEFG



#!/bin/bash
abc(){
abc|abc &
}
abc

==================================
循环的控制:
exit        退出脚本
break       终止循环,执行循环之后的任务 
continue	终止当前循环,继续下一次循环
------------------------
#!/bin/bash
for i in {1..10}
do
        [ $i -eq 5 ] && continue
        echo $i
done
echo ok
-------------------------
#!/bin/bash
for i in {1..10}
do
        [ $i -eq 5 ] && break
        echo $i
done
echo ok
=====================================
字符串的处理
1,字符串的截取
${变量名:起始位置:长度}         如果是第1位,那么起始位置是0
b=1802874632   定义变量
echo ${b:3:4}   截取变量的内容从第4位开始截取4位
echo ${b::4}	起始位置是0的话可以省略不写
------------------------------------
编写随机获取1位字符的脚本:
#!/bin/bash
x=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQ
RSTUVWXYZ0123456789
n=$[RANDOM%62]
echo ${x:n:1}
-----------------------------------------------------
编写获取随机8位密码的脚本
#!/bin/bash
x=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRS
TUVWXYZ0123456789
for i in {1..8}
do
n=$[RANDOM%62]    获取0~61之间的随机数字
p=${x:n:1}        获取1位随机字符
pass=$pass$p      将每次获取的随机字符赋值给变量pass
done
echo $pass
-------------------------------------------------------------------
2,字符串的替换
格式：${变量名/old/new}
b=1802874632    
echo ${b/1/a}     将1替换为a
echo ${b/8/a}	  将8替换为a
echo ${b//8/a}    将所有8替换为a
echo ${b/0/}      将数字0替换为空,相当于删除
----------------------------------------------
3,字符串的删除
${变量名#*关键词}    从左往右删除   掐头
echo $a
root:x:0:0:root:/root:/bin/bash
echo ${a#root}    删除到第一个root
echo ${a##*root}  删除到最后一个root,以及此root左边所有
echo ${a##*/}     删除到最后一个/,以及此/左边所有
echo ${a#*:root}  删除:root,以及左边所有
--------------------------------------------
${变量名%关键词*}    从右往左删除   去尾
echo ${a%bash}   从右往左删除到bash
echo ${a%root*}  从右往左删除到第一个root,以及root右边所有
echo ${a%/*}     从右往左删除到第一个/,以及/右边所有
echo ${a%%/*}    从右往左删除到最后一个/,以及/右边所有
--------------------------------------------
利用字符串删除功能,编写批量修改文件扩展名的脚本:
#!/bin/bash
for i in `ls *.txt`    首先找到修改目标
do
        n=${i%.*}      利用删除中的去尾将扩展名删除,剩下不带扩展名的文件名
        mv $i $n.doc   在将上述文件名与.doc组合,修改为新名字
done



回顾
case分支

case 变量 in
模式1)
	命令序列 ;;
模式2)
	命令序列 ;;
*)
	命令序列
esac

函数 可以将公共的语句块存储在一个函数中,达到精简脚本的目的

方式一
function 函数名 {
	命令序列
}
方式二
函数名 (){
	命令序列
}
----------------------------------------
for    
while 
exit
break
continue
-----------------------------
字符串处理
${变量名:}   截取
${变量名/}  替换
${变量名#}  掐头
${变量名%}  去尾
===================================
字符串初值的处理 
${变量名:-} 
[root@server0 opt]# a=
[root@server0 opt]# echo ${a:-123}      当变量是空时调用初值
123
[root@server0 opt]# a=789
[root@server0 opt]# echo ${a:-123}      变量有值时不使用初值
789
-------------------------------------------------------
配置密码时使用初值: 
#!/bin/bash
read -p "请输入用户名"  u
useradd $u
read -p "请输入密码(默认123456)" p
echo ${p:-123456} | passwd --stdin $u
-------------------------------------------------------
正则表达式,使用若干符号配合对应工具,实现对文本的匹配,查找,过滤
基本正则:
^     grep ^root user     搜索以root开头
$	  grep in$ user		  搜索以in结尾
[]	  grep [in] user	  搜索字母i或者n
[^]	  grep [^in] user     搜索除了字母i或者n
grep "." user      搜索任意单个字符,包括空格,但不包括空行
grep "ro*t" user   搜索r?t,r与t之间有没有o都可以
grep ".*"   user   搜索任意, 包括空行
grep "ro\{1,2\}t"  user   搜索rot,其中o可以出现1~2次
grep "ro\{2\}t" user      搜索rot,其中o出现2次
grep "ro\{1,\}t" user     搜索rot,其中o可以出现1次以及1次以上
grep "0:\{2\}" user		  搜索0::
grep "\(0:\)\{2\}" user   搜索0:0:
-----------------------------------------------------------------------
使用扩展正则, 需要用egrep或者 grep -E
grep -E "ro+t" user      搜索rot,o可以出现1次以及1次以上
egrep "ro+t" user	     搜索rot,o可以出现1次以及1次以上
egrep "bi?n" user	     搜索bin,i可以出现0次或者1次
egrep "ro{2}t" user 	 搜索rot,o出现2次
egrep "ro{1,3}t" user 	 搜索rot,o出现1~3次
egrep "ro{2,}t" user 	 搜索rot,o出现2次以及2次以上
grep "\(0:\)\{2\}" user  搜索0:0:
egrep "(0:){2}" user	 使用扩展正则搜索0:0:
egrep "ro|in" user		 搜索ro或者in
grep "\bthe" user1       搜索单词the,前面不能有数字字母下划线

======================================
echo 123 >> 1.txt
vim 
sed  流式编辑器, 非交互式修改文本,而且支持正则表达式,工作方式是逐行处理
使用方式:
1,  sed 选项  (定址符)指令     被处理的文件
2,   前置命令  | sed 选项  (定址符)指令
选项
-n   屏蔽默认输出        -r   支持扩展正则     -i   写入文件
指令
p  输出         d  删除      s  替换

sed -n 'p' user      使用sed输出所有行,屏蔽默认输出
sed -n '1p' user     输出第1行
sed -n '2,4p' user   输出2~4行
sed -n '3p;5p' user  输出第3行和第5行
sed -n '2,+3p' user  输出第2行以及后面的3行
sed -n '1~2p' user   输出奇数行
sed -n '2~2p' user   输出偶数行
sed -n '/bash$/p' user     使用正则输出以bash结尾的行
sed -rn '/root|bin/p' user 使用扩展正则输出有root或者bin的行

sed -n '=' user      显示行号
sed -n '$=' user	 显示最后一行的行号
sed -n '$=' /etc/passwd
sed  'd' user	     删除所有行
sed  '1d' user		 删除第1行
sed  '2,4d' user	 删除2~4行
sed  '3,+2d' user    删除第3行以及后面2行
sed  '2d;5d' user    删除第2行和第5行
sed -i '1,3d' user   删除1~3行,并写入文件

sed 's/xml/XML/'  a.txt		将每行中第1个xml替换为XML
sed 's/xml/XML/3' a.txt 	将每行中的第3个xml替换为XML
sed 's/xml/XML/g' a.txt 	将所有的xml都替换为XML
sed 's/xml//g'     a.txt 	将所有行的xml都删除

/bin/bash 换成 /sbin/sh

sed 's//bin/bash//sbin/sh/' user
sed 's/\/bin\/bash/\/sbin\/sh/' user
sed 's!/bin/bash!/sbin/sh!' user
sed 's(/bin/bash(/sbin/sh(' user
sed 's#/bin/bash#/sbin/sh#' user

编写脚本,对vsftpd服务完成装包配置启服务的过程,其中使用sed完成配置过程,实现服务可以匿名访问并且上传文件.

#!/bin/bash
yum -y install vsftpd &> /dev/null
sed -i '/anon_up/s/#//'   /etc/vsftpd/vsftpd.conf
systemctl restart vsftpd
systemctl enable vsftpd
systemctl stop firewalld
setenforce 0
chmod 777 /var/ftp/pub

====================================================
sed -i 's/#anon_up/anon_up/'   /etc/vsftpd/vsftpd.conf


sed 选项  (定址符)指令    处理的文件
前置指令 |  sed 选项  (定址符)指令
-n   -r   -i     p    d    s

cat nssw.txt

Hello th6e World
ni ha7o ma beijing

删除文件中每行的第二个、最后一个字符
sed 's/.//2;s/.$//' u

将文件中每行的第一个、倒数第1个字符互换
( )  保留(相当于复制)   \1 \2 相当于粘贴
sed -r 's/^(.)(.*)(.)$/\3\2\1/' u

删除文件中所有的数字
sed 's/[0-9]//g' u

为文件中每个大写字母添加括号
sed -r 's/([A-Z])/(\1)/g' u
----------------------------------------------------------------------
a在行下追加    i在行上添加    c替换整行

sed 'i XXXX' a        所有行上添加XXXX
sed '1i XXXX' a       第一行上添加XXXX
sed '1,2i XXXX' a     1~2行上添加
sed '1a XXXX' a       第一行下追加
sed 'c XXXX' a        所有行替换为XXXX
sed '1c XXXX' a       第一行替换
sed '/abc/c XXXX' a   有abc的行替换

-----------------------------------------------------------------------
编写脚本,找出使用bash的用户,按照 名字 --> 密码  的格式输出: 
#!/bin/bash
u=`sed -n '/bash$/s/:.*//p' /etc/passwd`    找到用bash的用户,并且把名字都存在变量u中
for i in $u   将变量u交给for循环处理
do
	x=`grep $i: /etc/shadow`   第一次循环,变量i是第一个用户
	a1=${x#*:}		掐头
	a2=${a1%%:*}    去尾
	echo "$i --> $a2"     输出
done

========================================
正则     
grep   模糊搜索
sed    可以修改文档
awk    精确搜索
------------------------------------------------
awk使用方式:
1 ,  awk 选项  (条件)指令   被处理的文件
2 ,    前置命令  |   awk 选项  (条件)指令  
选项:
-F 定义分隔符    
指令
print  输出
内置变量:
列  $0  $1  $2  $3 ...... NF列   NR行

awk '{print}' u
awk '{print $2}' u
awk '{print $0}' u
awk '{print $1}' u
awk '{print $1 $3}' u
awk '{print $1,$3}' u
awk '{print $0,$3}' u
awk '/beijing/{print}' u
----------------------------------------------------
cat user    准备素材
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
awk -F: '{print $6}' user  修改分隔符为冒号, 显示第6列
/root
/bin
awk -F: '/root/{print $6}' user   配合正则匹配有root的行,显示第6列
/root
awk -F/ '/root/{print $3}' user   修改分隔符,显示第3列
bin
awk -F[:/] '/root/{print $9}' user  使用冒号或者斜杠做分隔符,显示第9列
awk -F: '{print $1"的解释器是"$7}' user  输出常量,需要使用引号
awk -F: '{print $1 abc $7}' user    不加引号,系统会识别为变量,如果变量没有定义,则输出的值为空
awk -F: '{print $1 "abc" $7}' user  加引号,变常量输出
awk -F: '{print NR,NF}' user     输出行号和列号
----------------------------------------------------------------------------------------
ifconfig eth0 |awk '/TX p/{print "当前主机eth0网卡的发送流量是"$5"字节"}'
ifconfig eth0 |awk '/RX p/{print "当前主机eth0网卡的接收流量是"$5"字节"}'
df -h | awk '/vda1/{print "主机根分区剩余空间是"$4}'
----------------------------------------------------------------------------------------
使用awk,筛选出远程登录本机密码输入失败的主机ip:
awk '/Failed/{print $11}' /var/log/secure
----------------------------------------------------------------------------------------
awk的工作流程控制
BEGIN任务    执行1次
逐行任务       执行N次
END任务        执行1次
----------------------------------
awk 'BEGIN{x=10;print x}'    仅仅使用begin任务,执行1次
----------------------------------
awk 'BEGIN{print "x"}{print "A"}' user   执行1次begin任务,然后在执行逐行任务,逐行任务的执行次数与user文本的行数有关
----------------------------------
awk 'BEGIN{print "x"}{print "A"}END{print "Q"}' user   分别给begin,逐行,end 三个任务
----------------------------------------------------------------------------------------
\t  制表符  相当于tab键, 可以起到一定的排版效果
------------------------------------
awk -F: 'BEGIN{print "User\tUID\tHome"}{print $1"\t"$3"\t"$6}END{print "总计 "NR" 行"}' user 
==============================================
awk的条件
1,使用正则匹配
    ~   包含
awk '/bin/' user          输出含有bin的行
awk -F: '$1~/bin/' user   输出第一列包含bin的行
awk -F: '$1!~/bin/' user    输出第1列不包含bin的行
awk -F: '$1!~/^(bin|root)/' user   输出第1列不包含以bin或者root开头的行
-----------------------------------------
2,使用数值/字符串比较设置条件
==(等于)    !=（不等于） >（大于）
>=（大于等于） <（小于） <=（小于等于）
awk 'NR==2{print}' user   输出第2行内容
awk -F: '$1=="root"' user    输出第1列是root的行
awk -F: '$1!="root"' user    输出第1列不是root的行
awk -F: '$3=="0"' user       输出第3列是0的行
awk -F: '$3<10' /etc/passwd   输出第3列小于10的行
awk -F: 'NR<10' /etc/passwd   输出小于10行的内容,相当于输出1~9行
awk -F: '$3>=1000' /etc/passwd   输出第3列大于等于1000的行
--------------------------------------------
3,使用逻辑符号     &&并且       ||或者
---------------------------------------------
4,计算
awk 'BEGIN{x++;print x}'   
awk 'BEGIN{print 2*3}'     
awk 'BEGIN{a=10;b=20;print a*b}'
awk 'BEGIN{print 23%8}'
seq 200 | awk '$1%33==0'






























































































 
















i



